# Generated by Django 4.2.7 on 2024-01-15 10:30

from django.db import migrations, models
import django.db.models.deletion


def create_categories_and_update_products(apps, schema_editor):
    Product = apps.get_model('otica_app', 'Product')
    Category = apps.get_model('otica_app', 'Category')
    
    # Criar categorias padr√£o
    lentes_category, created = Category.objects.get_or_create(
        name='Lentes',
        defaults={'description': 'Lentes oft√°lmicas e de contato', 'active': True}
    )
    if created:
        print("‚úÖ Categoria 'Lentes' criada")
    
    armacoes_category, created = Category.objects.get_or_create(
        name='Arma√ß√µes',
        defaults={'description': 'Arma√ß√µes de √≥culos', 'active': True}
    )
    if created:
        print("‚úÖ Categoria 'Arma√ß√µes' criada")
    
    # Usar SQL direto para atualizar os produtos
    from django.db import connection
    with connection.cursor() as cursor:
        # Atualizar produtos com categoria 'lentes'
        cursor.execute(
            "UPDATE otica_app_product SET category_id = %s WHERE category = 'lentes'",
            [lentes_category.id]
        )
        lentes_updated = cursor.rowcount
        
        # Atualizar produtos com categoria 'armacoes'
        cursor.execute(
            "UPDATE otica_app_product SET category_id = %s WHERE category = 'armacoes'",
            [armacoes_category.id]
        )
        armacoes_updated = cursor.rowcount
        
        # Atualizar produtos com outras categorias para 'lentes'
        cursor.execute(
            "UPDATE otica_app_product SET category_id = %s WHERE category NOT IN ('lentes', 'armacoes')",
            [lentes_category.id]
        )
        other_updated = cursor.rowcount
    
    total_updated = lentes_updated + armacoes_updated + other_updated
    print(f"‚úÖ {lentes_updated} produtos 'lentes' atualizados")
    print(f"‚úÖ {armacoes_updated} produtos 'armacoes' atualizados")
    print(f"‚úÖ {other_updated} produtos com outras categorias atualizados")
    print(f"üéâ Total: {total_updated} produtos atualizados")


def reverse_migrate(apps, schema_editor):
    # N√£o √© necess√°rio reverter esta migra√ß√£o
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('otica_app', '0010_product_brand_product_code_product_model'),
    ]

    operations = [
        # Primeiro criar o modelo Category
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nome')),
                ('description', models.TextField(blank=True, verbose_name='Descri√ß√£o')),
                ('active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Categoria',
                'verbose_name_plural': 'Categorias',
                'ordering': ['name'],
            },
        ),
        # Adicionar o campo category_id como ForeignKey
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='otica_app.category', verbose_name='Categoria'),
        ),
        # Executar a fun√ß√£o para criar categorias e atualizar produtos
        migrations.RunPython(create_categories_and_update_products, reverse_migrate),
        # Tornar o campo obrigat√≥rio
        migrations.AlterField(
            model_name='product',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='otica_app.category', verbose_name='Categoria'),
        ),
    ]
